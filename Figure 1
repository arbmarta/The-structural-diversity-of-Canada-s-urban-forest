import matplotlib.pyplot as plt
import numpy as np
from scipy.ndimage import gaussian_filter1d
from matplotlib.lines import Line2D


def generate_youthful_curve(x, c=-0.02, starting_amplitude=1, b=-3.55):
    y = c + (starting_amplitude * np.exp(b * (x / 80)))
    y = np.maximum(y, 0)  # Ensure non-negative values

    # Ensure y = 1 when x = 0
    y[0] = 1.0

    y = y / np.max(y)  # Normalize to ensure maximum value is 1

    return y


def generate_mature_curve(x, value=0.25):
    return np.full_like(x, value)


def skewed_gaussian(x, mean, std_dev, skew_factor):
    # Generate a Gaussian curve and apply a skew factor to make it right-skewed
    gauss = (1 / (std_dev * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mean) / std_dev) ** 2)
    skew = (1 - skew_factor * (x - mean) / std_dev)
    y = gauss * skew
    return y


def adjust_y_with_conditions(x, y, c=0.02, x_peak=30, decay_length=60, decay_exponent=2.0):
    # Apply c when x < x_peak
    y[x < x_peak] += c

    # For x >= x_peak, apply a diminishing addition of c over the decay_length with an exponential decay
    mask = (x >= x_peak) & (x <= x_peak + decay_length)
    diminishing_factor = np.exp(-decay_exponent * ((x[mask] - x_peak) / decay_length))
    diminishing_factor = np.maximum(diminishing_factor, 0)  # Ensure no negative values

    y[mask] += c * diminishing_factor

    return y


def generate_maturing_curve(x, c=0.04, y_max=1.0, x_peak=32.5):
    # Generate skewed Gaussian curve for Type II maturing curve
    mean = x_peak  # Peak at x = 30
    std_dev = 7.5  # Standard deviation, adjust to control spread
    skew_factor = 0.3  # Adjust to control the amount of right skew
    decay = 80
    exponent = 3

    y = skewed_gaussian(x, mean, std_dev, skew_factor)

    # Apply adjustment conditions
    y = adjust_y_with_conditions(x, y, c=c, x_peak=x_peak, decay_length=decay, decay_exponent=exponent)

    # Normalize the curve to ensure it's comparable as proportions (set y at x=0 to c and y at x=80 to 0)
    y = y - np.min(y)  # Shift to start from 0
    y = y / np.max(y)  # Normalize to max value of 1
    y = y_max * y  # Scale to y_max

    # Apply smoothing to the final curve using Gaussian filter
    y_smoothed = gaussian_filter1d(y, sigma=4)  # Adjust sigma for more or less smoothing

    return y_smoothed


def normalize_to_key_points(x, y, key_points):
    # Extract the y-values at the specified key points
    y_values_at_points = np.interp(key_points, x, y)
    total = np.sum(y_values_at_points)

    # Scale y so that the sum of values at key points equals 1 (or 100%)
    scaling_factor = 1.0 / total
    y_normalized = y * scaling_factor

    return y_normalized


def plot_tree_population_curves():
    fig, ax = plt.subplots()

    x = np.linspace(0, 80, 300)
    key_points = [10, 30, 50, 70]

    # Type I (Youthful)
    y_youthful = generate_youthful_curve(x)
    y_youthful_normalized = normalize_to_key_points(x, y_youthful, key_points)
    ax.plot(x, y_youthful_normalized, lw=2, label='Youthful (Type I)', linestyle = '--', color='blue')
    ax.scatter(key_points, np.interp(key_points, x, y_youthful_normalized), color='blue', marker='o', s=100)

    # Type II (Maturing)
    y_maturing = generate_maturing_curve(x)
    y_maturing_normalized = normalize_to_key_points(x, y_maturing, key_points)
    ax.plot(x, y_maturing_normalized, lw=2, label='Maturing (Type II)', linestyle = '-.', color='green')
    ax.scatter(key_points, np.interp(key_points, x, y_maturing_normalized), color='green', marker='d', s=100)

    # Type III (Mature)
    y_mature = generate_mature_curve(x)
    y_mature_normalized = normalize_to_key_points(x, y_mature, key_points)
    ax.plot(x, y_mature_normalized, lw=2, label='Mature (Type III)', linestyle = '-', color='red')
    ax.scatter(key_points, np.interp(key_points, x, y_mature_normalized), color='red', marker='s', s=100)

    # Labels, ticks, and formatting
    ax.set_xlabel('Diameter at Breast Height (cm)')
    ax.set_ylabel('Proportion of Tree Population')

    ax.set_xticks([0, 20, 40, 60, 80])
    ax.set_xticklabels(['0 cm', '20 cm', '40 cm', '60 cm', '80 cm'])

    ax.set_xlim(0, 80)
    ax.set_ylim(0, 1)

    ax.axvline(x=20, color='black', linestyle='--', lw=1)
    ax.axvline(x=40, color='black', linestyle='--', lw=1)
    ax.axvline(x=60, color='black', linestyle='--', lw=1)

    ax.text(10, 1.05, 'Young', horizontalalignment='center', fontsize=10)
    ax.text(30, 1.05, 'Semi-mature', horizontalalignment='center', fontsize=10)
    ax.text(50, 1.05, 'Mature', horizontalalignment='center', fontsize=10)
    ax.text(70, 1.05, 'Old', horizontalalignment='center', fontsize=10)

    # Create custom legend handles with both line and marker
    legend_elements = [
        Line2D([0], [0], marker='o', color='blue', label='Youthful (Type I)', markersize=8, linestyle='--',
               linewidth=1.5),
        Line2D([0], [0], marker='d', color='green', label='Maturing (Type II)', markersize=10, linestyle=':',
               linewidth=1.5),
        Line2D([0], [0], marker='s', color='red', label='Mature (Type III)', markersize=8, linestyle='-', linewidth=1.5)
    ]

    # Add the custom legend to the plot
    ax.legend(handles=legend_elements)

    plt.tight_layout()

    plt.savefig('Figure 1.png', dpi=900)  # Save at 900 DPI
    plt.show()

    plt.show()


if __name__ == '__main__':
    plot_tree_population_curves()
