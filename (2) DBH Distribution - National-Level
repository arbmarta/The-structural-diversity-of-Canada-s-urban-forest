# This code is based on the work of Morgenroth et al. (2020) (DOI: 10.3390/f11020135)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.lines as mlines

## ----------------------------------------------- IMPORT DATA AND MERGE -----------------------------------------------
#region
## Import data and merge
master_df = pd.read_csv(r'C:\Users\alexj\Documents\Research\Canadian Urban Forest Inventories - DBH\Python Scripts and Datasets\(2) Filtered Master Dataset.csv', low_memory=False)
location_index_df = pd.read_csv(r'C:\Users\alexj\Documents\Research\Canadian Urban Forest Inventories - DBH\Python Scripts and Datasets\Non-Inventory Datasets\Location Index.csv', low_memory=False)
df = master_df.merge(location_index_df, how='left', on='City')
excluded_cities = ['Maple Ridge', 'New Westminster', 'Peterborough', 'Halifax']
df = df[~df['City'].isin(excluded_cities)]

# Define cities and prepare lists for all midpoints and proportions
cities = df['City'].unique()
ecozone = df['Ecozone'].unique()
city_size = df['City Size'].unique()

## Clean and sort the DBH
# Ensure DBH is numeric and drop NaN values
df['DBH'] = pd.to_numeric(df['DBH'], errors='coerce')
df = df.dropna(subset=['DBH'])
#endregion

## ------------------------------------- DBH DISTRIBUTION COUNT: RICHARDS ----------------------------------------------
#region
tree_counts = {
    "less_than_20": {},
    "20_to_40": {},
    "equal_to_40": {},
    "40_to_60": {},
    "greater_than_60": {}
}

for city in cities:
    city_data = df[df['City'] == city]
    tree_counts["less_than_20"][city] = city_data[city_data['DBH'] < 20].shape[0]
    tree_counts["20_to_40"][city] = city_data[(city_data['DBH'] >= 20) & (city_data['DBH'] < 40)].shape[0]
    tree_counts["equal_to_40"][city] = city_data[city_data['DBH'] == 40].shape[0]
    tree_counts["40_to_60"][city] = city_data[(city_data['DBH'] > 40) & (city_data['DBH'] <= 60)].shape[0]
    tree_counts["greater_than_60"][city] = city_data[city_data['DBH'] > 60].shape[0]

# Adjust counts for "equal_to_40"
for city in cities:
    equal_to_40_count = tree_counts["equal_to_40"][city]
    half_count = equal_to_40_count / 2

    # Redistribute half counts
    tree_counts["20_to_40"][city] += half_count
    tree_counts["40_to_60"][city] += half_count

# Remove the "equal_to_40" column entirely
tree_counts.pop("equal_to_40")

tree_counts_df = pd.DataFrame(tree_counts)

# Add total count for each city
tree_counts_df["total_count"] = tree_counts_df.sum(axis=1)

# Add proportion columns
tree_counts_df["prop_less_than_20"] = tree_counts_df["less_than_20"] / tree_counts_df["total_count"] * 100
tree_counts_df["prop_20_to_40"] = tree_counts_df["20_to_40"] / tree_counts_df["total_count"] * 100
tree_counts_df["prop_40_to_60"] = tree_counts_df["40_to_60"] / tree_counts_df["total_count"] * 100
tree_counts_df["prop_greater_than_60"] = tree_counts_df["greater_than_60"] / tree_counts_df["total_count"] * 100

output_file = "DBH Bins - Richards.csv"
tree_counts_df.to_csv(output_file, index=True, index_label="City")
print(f"Tree counts exported to {output_file}")
#endregion

## ------------------------------------- DBH DISTRIBUTION COUNT: MILLWARD ----------------------------------------------
#region
tree_counts_millward = {
    "less_than_15": {},
    "15_to_less_than_60": {},
    "60_to_less_than_90": {},
    "90_or_greater": {},
}

for city in cities:
    city_data = df[df['City'] == city]
    tree_counts_millward["less_than_15"][city] = city_data[city_data['DBH'] < 15].shape[0]
    tree_counts_millward["15_to_less_than_60"][city] = city_data[(city_data['DBH'] >= 15) & (city_data['DBH'] < 60)].shape[0]
    tree_counts_millward["60_to_less_than_90"][city] = city_data[(city_data['DBH'] >= 60) & (city_data['DBH'] < 90)].shape[0]
    tree_counts_millward["90_or_greater"][city] = city_data[city_data['DBH'] >= 90].shape[0]

tree_counts_millward_df = pd.DataFrame(tree_counts_millward)

# Add total count for each city
tree_counts_millward_df["total_count"] = tree_counts_millward_df.sum(axis=1)

# Add proportion columns
tree_counts_millward_df["prop_less_than_15"] = tree_counts_millward_df["less_than_15"] / tree_counts_millward_df["total_count"] * 100
tree_counts_millward_df["prop_15_to_less_than_60"] = tree_counts_millward_df["15_to_less_than_60"] / tree_counts_millward_df["total_count"] * 100
tree_counts_millward_df["prop_60_to_less_than_90"] = tree_counts_millward_df["60_to_less_than_90"] / tree_counts_millward_df["total_count"] * 100
tree_counts_millward_df["prop_90_or_greater"] = tree_counts_millward_df["90_or_greater"] / tree_counts_millward_df["total_count"] * 100

output_file = "DBH Bins - Millward.csv"
tree_counts_millward_df.to_csv(output_file, index=True, index_label="City")
print(f"Tree counts exported to {output_file}")
#endregion


## ---------------------------------------- Figure 3: PLOT DATA TO RICHARDS DISTRIBUTION -------------------------------
## Figure settings
#region
plt.figure(figsize=(12, 6))

# Set font sizes explicitly by doubling the default values
plt.rcParams.update({
    'font.size': 14,  # General text size
    'axes.labelsize': 14,  # Axis titles
    'xtick.labelsize': 14,  # X-axis numbers
    'ytick.labelsize': 14   # Y-axis numbers
})

# Define proportion columns
proportion_columns = ["prop_less_than_20", "prop_20_to_40", "prop_40_to_60", "prop_greater_than_60"]
#endregion

## Richards Data
#region
richards_midpoints = [10, 30, 50, 70]  # Midpoints for each bin
richards_values = [40, 30, 20, 10]  # Hypothetical values from Richards' data

x = np.linspace(0, 100, 1000)
y = -0.5 * x + 45  # Hypothetical line function for Richards
plt.plot(x, y, 'b--', label='Line: y = -0.5x + 45') # Plot Richards data and line
#endregion


# Plot the proportions for each city
for city in tree_counts_df.index:
    plt.scatter(
        [10, 30, 50, 70],  # Replace proportion column labels with x-values
        tree_counts_df.loc[city, proportion_columns],
        marker='o',
        color='black',
        s=10,
        label=f'{city} Data'
    )

# Create a line of best fit
x_fit = np.linspace(0, 100, 1000)
y_fit = -0.6834 * x + 52.38  # Hypothetical line of best fit (use appropriate values for your data)
plt.plot(x_fit, y_fit, 'k-', label='Line of Best Fit')

plt.scatter(richards_midpoints, richards_values, color='blue', marker='s', label='Richards Data', s=80) # Scatter plot for Richards data

# Add vertical dashed lines at 20 cm, 40 cm, and 60 cm
plt.axvline(x=20, color='gray', linestyle='--')
plt.axvline(x=40, color='gray', linestyle='--')
plt.axvline(x=60, color='gray', linestyle='--')

# Adjust the space above the plot for the labels
plt.subplots_adjust(top=0.85)

# Add text labels for "Young", "Semi-Mature", "Mature", and "Old" using normalized x-coordinates (relative to the axes)
plt.text(0.125, 1.05, 'Young', horizontalalignment='center', transform=plt.gca().transAxes)
plt.text(0.375, 1.05, 'Semi-Mature', horizontalalignment='center', transform=plt.gca().transAxes)
plt.text(0.625, 1.05, 'Mature', horizontalalignment='center', transform=plt.gca().transAxes)
plt.text(0.875, 1.05, 'Old', horizontalalignment='center', transform=plt.gca().transAxes)

# Legend
inventory_data_handle = mlines.Line2D([], [], color='k', marker='o', linestyle='None', markersize=8, label='Inventory Data')
best_fit_handle = mlines.Line2D([], [], color='k', linestyle='-', markersize=8, label='Line of Best Fit')
richards_handle = mlines.Line2D([], [], color='b', marker='s', linestyle='--', markersize=8, label='Richards (1983)')
plt.legend(handles=[inventory_data_handle, best_fit_handle, richards_handle])

# Customize plot
plt.xlim(0, 80)
plt.ylim(0, 75)
plt.xlabel('Diameter at Breast Height (cm)')
plt.ylabel('Proportion of Trees (%)')
plt.grid(False)

# Save the figure to file
plt.savefig("Figure 3.png", dpi=900)

plt.show()

## ---------------------------------------- Figure 4: PLOT DATA TO MILLWARD DISTRIBUTION -------------------------------
## Figure settings
#region
plt.figure(figsize=(12, 6))

# Set font sizes explicitly by doubling the default values
plt.rcParams.update({
    'font.size': 14,  # General text size
    'axes.labelsize': 14,  # Axis titles
    'xtick.labelsize': 14,  # X-axis numbers
    'ytick.labelsize': 14   # Y-axis numbers
})

# Define proportion columns
proportion_columns = ["prop_less_than_15", "prop_15_to_less_than_60", "prop_60_to_less_than_90", "prop_90_or_greater"]
#endregion

## Millward Data
#region
millward_midpoints = [7.5, 37.5, 75, 100]  # Midpoints for each bin
millward_values = [40, 30, 25, 5]  # Hypothetical values from Millward's data
plt.scatter(millward_midpoints, millward_values, color='blue', marker='s', label='Millward & Sabir Data', s=80) # Scatter plot for Millward data

x = np.linspace(0, 110, 1000)
y = -0.3409 * x + 43.747  # Hypothetical line function for Millward
plt.plot(x, y, 'b--', label='Line: y = -0.5x + 45') # Plot Millward data and line

median_midpoints = [7.5, 37.5, 75, 100]  # Midpoints for each bin
median_values = [38.7495, 53.72588, 6.203929, 1.045328]
#endregion


# Plot the proportions for each city
for city in tree_counts_millward_df.index:
    plt.scatter(
        [7.5, 37.5, 75, 100],  # Replace proportion column labels with x-values
        tree_counts_millward_df.loc[city, proportion_columns],
        marker='o',
        color='black',
        s=10,
        label=f'{city} Data'
    )

# Create a line of best fit
x_fit = np.linspace(0, 110, 1000)
y_fit = -0.5232 * x + 53.71  # Hypothetical line of best fit (use appropriate values for your data)
plt.plot(x_fit, y_fit, 'k-', label='Line of Best Fit')

plt.scatter(median_midpoints, median_values, color='red', marker='^', label='Median of Inventory Data', s=80) # Scatter plot for Millward data

# Add vertical dashed lines
plt.axvline(x=15, color='gray', linestyle='--')
plt.axvline(x=60, color='gray', linestyle='--')
plt.axvline(x=90, color='gray', linestyle='--')

# Adjust the space above the plot for the labels
plt.subplots_adjust(top=0.85)

# Add text labels for using normalized x-coordinates (relative to the axes)
plt.text(7.5, 78, 'Group 1', horizontalalignment='center')
plt.text(37.5, 78, 'Group 2', horizontalalignment='center')
plt.text(75, 78, 'Group 3', horizontalalignment='center')
plt.text(100, 78, 'Group 4', horizontalalignment='center')

# Legend
inventory_data_handle = mlines.Line2D([], [], color='k', marker='o', linestyle='None', markersize=8, label='Inventory Data')
median_data_handle = mlines.Line2D([], [], color='r', marker='^', linestyle='None', markersize=8, label='Median Value of Inventory Data')
best_fit_handle = mlines.Line2D([], [], color='k', linestyle='-', markersize=8, label='Line of Best Fit')
richards_handle = mlines.Line2D([], [], color='b', marker='s', linestyle='--', markersize=8, label='Millward & Sabir (2010)')
plt.legend(handles=[inventory_data_handle, median_data_handle, best_fit_handle, richards_handle])

# Customize plot
plt.xlim(0, 110)
plt.xticks(ticks=np.arange(0, 111, 10))
plt.ylim(0, 75)
plt.xlabel('Diameter at Breast Height (cm)')
plt.ylabel('Proportion of Trees (%)')
plt.grid(False)

# Save the figure to file
plt.savefig("Figure 4.png", dpi=900)

plt.show()

## ----------------------------------------- EXTRA FIGURE: BAR GRAPH FOR EACH CITY -------------------------------------
#region
prop_columns = ["prop_less_than_20", "prop_20_to_40", "prop_40_to_60", "prop_greater_than_60"]
custom_colors = ["#006d2c", "#31a354", "#74c476", "#bae4b3"]  # Replace with your preferred colors
tree_counts_df_sorted = tree_counts_df.sort_values(by="prop_less_than_20", ascending=False)

fig, ax = plt.subplots(figsize=(12, len(tree_counts_df_sorted) * 0.4))  # Adjust height dynamically for city count

cities = tree_counts_df_sorted.index  # Cities on y-axis
bottom = np.zeros(len(cities))  # Initialize the bottom for stacking

for i, prop in enumerate(prop_columns):
    ax.barh(
        cities,
        tree_counts_df_sorted[prop],
        left=bottom,
        color=custom_colors[i],
        label=prop.replace("prop_", "").replace("_", " ").capitalize(),
    )
    bottom += tree_counts_df_sorted[prop]  # Update the bottom for the next bar

vertical_lines = [(40, 'red'), (70, 'red'), (90, 'red')]
for x, color in vertical_lines:
    ax.axvline(x=x, color=color, linestyle="--", linewidth=3, alpha=0.8)

ax.set_xlabel("Proportion (%)", fontsize=14)
ax.set_ylabel("Cities", fontsize=14)
ax.tick_params(axis="both", labelsize=12)

ax.legend(
    title="Trunk Diameter (cm)",
    title_fontsize=14,
    fontsize=14,
    loc="upper left",
    bbox_to_anchor=(1.05, 1),
)

plt.tight_layout()
plt.show()
#endregion
